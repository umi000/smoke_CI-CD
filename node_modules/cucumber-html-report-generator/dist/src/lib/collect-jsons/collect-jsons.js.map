{"version":3,"file":"collect-jsons.js","sourceRoot":"","sources":["../../../../src/lib/collect-jsons/collect-jsons.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sFAAwE;AACxE,sEAAwD;AAGxD,MAAa,YAAY;IAGvB,YAAoB,cAAuC;QA2B1C,uBAAkB,GAAG,KAAK,IAAqC,EAAE;YAChF,IAAI,KAAK,GAAG,MAAM,eAAe,CAAC,aAAa,CAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAE,CAAC;YAC/E,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YACrB,MAAM,gBAAgB,GAAG,KAAK,CAAC,MAAM,CAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAE,OAAO,CAAE,CAAE,CAAC;YAE1E,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,GAAG,CACpC,gBAAgB,CAAC,GAAG,CAAE,KAAK,EAAC,OAAO,EAAC,EAAE;gBACpC,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,YAAY,CAAoB,OAAO,CAAE,CAAC;gBAC/E,MAAM,cAAc,GAAG,KAAK,CAAC,OAAO,CAAE,MAAM,CAAE;oBAC5C,CAAC,CAAC,MAAM,CAAC,MAAM,CAAE,OAAO,CAAC,EAAE,CAAC,OAAO,OAAO,CAAC,EAAE,KAAK,WAAW,IAAI,OAAO,OAAO,CAAC,OAAO,KAAK,WAAW,CAAE;oBACzG,CAAC,CAAC,IAAI,CAAC;gBACT,OAAO,KAAK,CAAC,OAAO,CAAE,cAAc,CAAE,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC;YAC1F,CAAC,CAAE,CACJ,CAAC;YACF,MAAM,eAAe,GAAuB,YAAY,CAAC,MAAM,CAAE,CAAE,OAAO,EAAgC,EAAE,CAAC,OAAO,KAAK,IAAI,CAAE,CAAC;YAChI,OAAO,eAAe,CAAC;QACzB,CAAC,CAAC;QA1CA,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,gBAAgB;QAC3B,MAAM,UAAU,GAAG,KAAK,EAAkB,CAAC;QAE3C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAEjD,IAAK,CAAC,QAAQ,CAAC,MAAM,EAAG;YACtB,MAAM,IAAI,KAAK,CAAE,QAAQ,CAAC,mBAAmB,CAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAE,CAAG,CAAC;SACjF;QAED,QAAQ,CAAC,OAAO,CAAE,IAAI,CAAC,EAAE;YACvB,IAAI,CAAC,OAAO,CAAE,OAAO,CAAC,EAAE;gBACtB,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,EAAE,QAAQ,EAAE,CAAC,OAAO,CAAE,GAAG,EAAE,GAAG,CAAE,CAAC;gBACxD,UAAU,CAAC,IAAI,CAAE,OAAO,CAAE,CAAC;YAC7B,CAAC,CAAE,CAAC;QACN,CAAC,CAAE,CAAC;QAEJ,IAAK,IAAI,CAAC,cAAc,CAAC,iBAAkB,EAAG;YAC5C,MAAM,eAAe,CAAC,YAAY,CAAE,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,qBAAqB,EAAE,UAAU,CAAE,CAAC;SACzG;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;CAmBF;AA/CD,oCA+CC","sourcesContent":["import * as CommonFunctions from '../common-functions/common-functions';\nimport * as Messages from '../helpers/console-messages';\nimport type * as Models from '../models/models';\n\nexport class CollectJsons {\n  private readonly userProperties: Models.ReportGeneration;\n\n  public constructor( userProperties: Models.ReportGeneration ) {\n    this.userProperties = userProperties;\n  }\n\n  public async createJoinedJson (): Promise<Models.Feature[]> {\n    const jsonOutput = Array<Models.Feature>();\n\n    const fileList = await this.getJsonReportFiles();\n\n    if ( !fileList.length ) {\n      throw new Error( Messages.noJsonFilesProvided( this.userProperties.jsonDir )  );\n    }\n\n    fileList.forEach( json => {\n      json.forEach( feature => {\n        feature.id = feature.id?.toString().replace( '/', '_' );\n        jsonOutput.push( feature );\n      } );\n    } );\n\n    if ( this.userProperties.saveCollectedJSON! ) {\n      await CommonFunctions.saveJsonFile( this.userProperties.reportPath, '/merged-output.json', jsonOutput );\n    }\n\n    return jsonOutput;\n  }\n\n  private readonly getJsonReportFiles = async (): Promise<( Models.Feature[] )[]> => {\n    let files = await CommonFunctions.getFilesAsync( this.userProperties.jsonDir );\n    files = files.sort();\n    const validReportsList = files.filter( file => file.endsWith( '.json' ) );\n\n    const validReports = await Promise.all(\n      validReportsList.map( async element => {\n        const result = await CommonFunctions.readJsonFile<Models.Feature[]>( element );\n        const resultFiltered = Array.isArray( result )\n          ? result.filter( feature => typeof feature.id !== 'undefined' && typeof feature.keyword !== 'undefined' )\n          : null;\n        return Array.isArray( resultFiltered ) && resultFiltered.length ? resultFiltered : null;\n      } )\n    );\n    const filteredReports: Models.Feature[][] = validReports.filter( ( feature ): feature is Models.Feature[] => feature !== null );\n    return filteredReports;\n  };\n}\n"]}