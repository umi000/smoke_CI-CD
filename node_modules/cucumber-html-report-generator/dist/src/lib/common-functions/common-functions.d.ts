/// <reference types="node" />
import * as Models from '../models/models';
import type * as messages from '@cucumber/messages';
import type { Readable } from 'stream';
export declare const streamToArray: (readableStream: Readable) => Promise<messages.Envelope[]>;
export declare const updatePercentages: (results: Models.FeatureModuleResults | Models.ModuleResults) => Models.FeatureModuleResults | Models.ModuleResults;
export declare const updateResultsAndPercentages: (sourceResults: Models.ModuleResults, targetResults: Models.ModuleResults) => Models.ModuleResults;
export declare const updateStatus: (featureResults: Models.FeatureResults) => Models.Result[];
export declare const isMetadata: (metadata: Models.Metadata[] | undefined) => metadata is Models.Metadata[];
export declare const escapeHTML: (value: string) => string;
export declare const isBase64: (value: string) => boolean;
export declare const getFilesAsync: (dir: string) => Promise<string[]>;
export declare const checkFolder: (file: string | undefined) => boolean;
export declare const readJsonFile: <T>(file: string, encoding?: BufferEncoding) => Promise<T | null>;
export declare const saveJsonFile: <T>(filePath: string | undefined, fileName: string, json: T) => Promise<boolean>;
export declare const getDateFormatted: (date: Date) => string;
export declare const convertTimeFromNanoSecondsToHHMMSS: (time: number) => string;
export declare const moveArray: <T>(arr: T[], fromIndex: number, toIndex: number) => T[];
export declare const exists: (filePath: string) => boolean;
export declare const initializePath: (reportPath?: string | undefined) => string;
export declare const pathExists: (folderPath: string) => Promise<boolean>;
export declare const emptyFolder: (folderPath: string) => Promise<void>;
//# sourceMappingURL=common-functions.d.ts.map