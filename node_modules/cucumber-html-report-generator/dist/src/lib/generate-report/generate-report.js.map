{"version":3,"file":"generate-report.js","sourceRoot":"","sources":["../../../../src/lib/generate-report/generate-report.ts"],"names":[],"mappings":";;;;;;AACA,8EAA6E;AAC7E,kEAA8D;AAC9D,2DAAuD;AACvD,+EAAyE;AACzE,kDAA0B;AAC1B,oGAAwF;AAEjF,MAAM,kBAAkB,GAAG,KAAK,EAAG,mBAAqD,EAAE,UAAiC,EAAkB,EAAE;IACpJ,MAAM,8BAA8B,GAAG,4DAAwB,CAAC,iCAAiC,CAAE,mBAAmB,CAAE,CAAC;IACzH,MAAM,IAAI,4BAAY,CAAE,UAAU,EAAE,8BAA8B,CAAE,CAAC,eAAe,EAAE,CAAC;AACzF,CAAC,CAAC;AAHW,QAAA,kBAAkB,sBAG7B;AAEK,MAAM,wBAAwB,GAAG,KAAK,EAAG,UAAiC,EAAE,cAAuC,EAA2B,EAAE;IACrJ,OAAO,CAAE,MAAM,eAAK,CAAC,OAAO,CAAmB;QAC7C,YAAY,EAAC;YACX,iBAAiB,EAAE,KAAK;SACzB;QACD,YAAY,EAAE,MAAM;QACpB,MAAM,EAAE,MAAM;QACd,GAAG,EAAE,GAAG,cAAc,CAAC,iBAAkB,eAAe;QACxD,IAAI,EAAE,UAAU;QAChB,YAAY,EAAE,CAAC;QACf,aAAa,EAAE,QAAQ;QACvB,gBAAgB,EAAE,QAAQ;QAC1B,OAAO,EAAC;YACN,cAAc,EAAE,kBAAkB;SACnC;KACF,CAAE,CAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;AACtB,CAAC,CAAC;AAhBW,QAAA,wBAAwB,4BAgBnC;AAEK,MAAM,QAAQ,GAAG,KAAK,EAAG,cAA8C,EAA2B,EAAE;IACzG,MAAM,qBAAqB,GAAG,4DAAwB,CAAC,+BAA+B,CAAE,cAAc,CAAE,CAAC;IACzG,MAAM,QAAQ,GAAG,MAAM,IAAI,uCAAmB,CAAE,qBAAqB,CAAE,CAAC,eAAe,EAAE,CAAC;IAC1F,MAAM,SAAS,GAAG,MAAM,IAAI,4BAAY,CAAE,qBAAqB,CAAE,CAAC,gBAAgB,EAAE,CAAC;IACrF,MAAM,UAAU,GAAG,MAAM,IAAI,8BAAY,CAAE,qBAAqB,CAAE,CAAC,UAAU,CAAE,SAAS,EAAE,QAAQ,CAAE,CAAC;IACrG,IAAI,QAAQ,GAAkB,IAAI,CAAC;IACnC,IAAK,qBAAqB,CAAC,mBAAmB,EAAG;QAC/C,QAAQ,GAAG,MAAM,IAAA,gCAAwB,EAAE,UAAU,EAAE,qBAAqB,CAAE,CAAC;KAChF;IACD,MAAM,IAAA,0BAAkB,EAAE,qBAAqB,EAAE,UAAU,CAAE,CAAC;IAC9D,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAXW,QAAA,QAAQ,YAWnB","sourcesContent":["import type * as Models from '../models/models';\nimport { CollectFeatureFiles } from '../feature-collector/feature-collector';\nimport { CollectJsons } from '../collect-jsons/collect-jsons';\nimport { GenerateHtml } from './helpers/generate-html';\nimport { SuiteFactory } from './ReportObjectsFormatters/suite-formatter';\nimport axios from 'axios';\nimport { userPropertiesValidation } from '../helpers/application-properties-validation';\n\nexport const generateHtmlReport = async ( reportConfiguration: Models.ReportDisplay | undefined, jsonReport: Models.ExtendedReport ): Promise<void> =>{\n  const reportConfigurationInitialized = userPropertiesValidation.initializeReportDisplayParameters( reportConfiguration );\n  await new GenerateHtml( jsonReport, reportConfigurationInitialized ).createHtmlPages();\n};\n\nexport const insertReportIntoDatabase = async ( jsonReport: Models.ExtendedReport, userProperties: Models.ReportGeneration ): Promise<string | null> =>{\n  return ( await axios.request<Models.Response>( {\n    transitional:{\n      silentJSONParsing: false\n    },\n    responseType: 'json',\n    method: 'POST',\n    url: `${userProperties.mongooseServerUrl!}/insertReport`,\n    data: jsonReport,\n    maxRedirects: 0,\n    maxBodyLength: Infinity, \n    maxContentLength: Infinity,\n    headers:{\n      'content-type': 'application/json'\n    }\n  } ) ).data.reportId;\n};\n\nexport const generate = async ( userProperties: Models.ReportGeneration | null ): Promise<string | null> =>{\n  const checkedUserProperties = userPropertiesValidation.checkReportGenerationParameters( userProperties );\n  const features = await new CollectFeatureFiles( checkedUserProperties ).collectFeatures();\n  const jsonFiles = await new CollectJsons( checkedUserProperties ).createJoinedJson();\n  const jsonReport = await new SuiteFactory( checkedUserProperties ).parseJsons( jsonFiles, features );\n  let reportId: string | null = null;\n  if ( checkedUserProperties.saveReportInMongoDb ) {\n    reportId = await insertReportIntoDatabase( jsonReport, checkedUserProperties );\n  }\n  await generateHtmlReport( checkedUserProperties, jsonReport );\n  return reportId;\n};\n"]}