{"version":3,"file":"step-formatter.js","sourceRoot":"","sources":["../../../../../src/lib/generate-report/ReportObjectsFormatters/step-formatter.ts"],"names":[],"mappings":"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","sourcesContent":["import * as CommonFunctions from '../../common-functions/common-functions';\nimport * as Models from '../../models/models';\n\nexport class StepFormatter {\n  public parseStep ( step: Models.Step ): Models.Step {\n    let localStep = step;\n    localStep = this.initializeStep( localStep );\n    localStep = this.formatStepEmbeddings( localStep );\n    if( typeof step.rows !== 'undefined' && step.rows.length ){\n      step.rowsCells = this.formatRows( step.rows );\n    }\n    step.argumentsCells = this.formatRows( step.arguments?.[0]?.rows );\n    this.setColorAndIcon( step );\n    return localStep;\n  }\n\n  private formatStepEmbeddings ( step: Models.Step ): Models.Step {\n    if ( step.embeddings.length ) {\n      step.embeddings.forEach( ( embedding: Models.Embedding, embeddingIndex: number ) => {\n        let embeddingType = typeof embedding.mime_type === 'undefined' ? embedding.media?.type : embedding.mime_type ;\n        let embeddingData: string = embedding.data;\n\n        switch ( embeddingType ){\n        case 'application/json':\n          try {\n            embeddingData = JSON.stringify( JSON.parse( embeddingData ), undefined, 2 );\n          } catch ( error: unknown ){\n            embeddingData = ( <Error>error ).message;\n          }\n          step.json = step.json.concat( [ embeddingData ] );\n          break;\n\n        case 'text/html':\n          step.html = step.html.concat( [ CommonFunctions.isBase64( embeddingData ) ? Buffer.from( embeddingData, 'base64' ).toString( 'utf-8' ) : embeddingData ] );\n          break;\n\n        case 'text/plain':\n          step.text = ( step.text ? step.text : [] ).concat( [\n            CommonFunctions.isBase64( embeddingData ) ? CommonFunctions.escapeHTML( Buffer.from( embeddingData, 'binary' ).toString( 'base64' ) ) : CommonFunctions.escapeHTML( embeddingData )\n          ] );\n          break;\n\n        case 'image/png':\n          embeddingType.split( ':' );\n          step.image = step.image.concat( [ `data:image/png;base64,${  embeddingData}` ] );\n          step.embeddings[ embeddingIndex ] = <Models.Embedding>{} ;\n          break;\n\n        case 'audio/ogg':\n          step.audio = step.audio.concat( [ `data:audio/mpeg;base64,${  embeddingData}` ] );\n          step.embeddings[ embeddingIndex ] = <Models.Embedding>{};\n          break;\n\n        case 'video/ogg':\n          step.video = step.video.concat( [ `data:video/mpeg;base64,${  embeddingData}` ] );\n          step.embeddings[ embeddingIndex ] = <Models.Embedding>{};\n          break;\n\n        default:\n          embeddingType = 'text/plain';\n          if ( embedding.mime_type ) {\n            embeddingType = embedding.mime_type;\n          } else if ( embedding.media?.type ) {\n            embeddingType = embedding.media.type;\n          }\n          step.attachments.push( {\n            data: `data:${embeddingType};base64,${embedding.data}`,\n            type: embeddingType\n          } );\n        }\n        step.embeddings[ embeddingIndex ] = <Models.Embedding>{};\n      } );\n    }\n    return step;\n  }\n\n  private formatRows ( rows: Models.Row[] | undefined ): string {\n    let rowsTemp = '';\n    if ( typeof rows !== 'undefined' && rows.length ) {\n      rowsTemp = '<table class=\\'table-bordered table-dark ms-4\\'>';\n      rows.forEach( ( row, rowIndex ) => {\n        rowsTemp += '<tr\\\\>';\n        row.cells.forEach( ( cell ) => {\n          if ( rowIndex === 0 ) {\n            rowsTemp += `<td class=bg-primary> ${cell} </td>`;\n          } else {\n            rowsTemp += `<td> ${cell} </td>`;\n          }\n        } );\n        rowsTemp += '</tr>';\n      } );\n      rowsTemp = `${rowsTemp} </table>`;\n    }\n    return rowsTemp;\n  }\n\n  private setColorAndIcon ( step: Models.Step ): void{\n    switch ( step.result.status ){\n    case Models.Status.passed:\n      step.result.color = ' passed-color';\n      step.result.icon = 'fa fa-check-circle fa-1x';\n      step.result.title = 'Step passed';\n      break;\n    case Models.Status.failed:\n      step.result.color = ' failed-color';\n      step.result.icon = ' fa fa-exclamation-circle fa-1x ';\n      step.result.title = 'Step failed';\n      break;\n    case Models.Status.ambiguous:\n      step.result.color = 'ambiguous-color';\n      step.result.icon = ' fas fa-bolt fa-1x ';\n      step.result.title = 'Step has double step implementation and failed because of that';\n      break;\n    case Models.Status.pending:\n      step.result.color = 'pending-color';\n      step.result.icon = ' fa fa-minus-circle fa-1x ';\n      step.result.title = 'Step is pending';\n      break;\n    case Models.Status.skipped:\n      step.result.color = 'skipped-color';\n      step.result.icon = ' fas fa-arrow-circle-right fa-1x ';\n      step.result.title = 'Step is skipped';\n      break;\n    case Models.Status.undefined:\n      step.result.color = 'undefined-color';\n      step.result.icon = ' fa fa-question-circle fa-1x ';\n      step.result.title = 'Step passed';\n      break;\n    // No default\n    }\n  }\n\n  private initializeStep( step: Models.Step ): Models.Step{\n    step.audio = [];\n    step.attachments = [];\n    step.arguments = typeof step.arguments === 'undefined' ? []: step.arguments;\n    step.embeddings = typeof step.embeddings === 'undefined' ? [] : step.embeddings;\n    step.examples = [];\n    step.html = [];\n    step.json = [];\n    step.id = '';\n    step.line = typeof step.line === 'undefined' ? -1 : step.line;\n    step.image = [];\n    step.result.duration = typeof step.result.duration === 'undefined' ? 0 : step.result.duration;\n    step.result.durationHHMMSS = CommonFunctions.convertTimeFromNanoSecondsToHHMMSS( step.result.duration );\n    step.rows = typeof step.rows === 'undefined' ? [] : step.rows;\n    step.text = null;\n    step.output = typeof step.output === 'undefined' ? [] : step.output;\n    step.video = [];\n    if( step.match ){\n      step.match.arguments = typeof step.match.arguments === 'undefined' ? []: step.match.arguments;\n      step.match.location = '';\n    }\n    return step;\n  }\n}\n"]}