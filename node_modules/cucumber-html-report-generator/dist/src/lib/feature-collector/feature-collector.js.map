{"version":3,"file":"feature-collector.js","sourceRoot":"","sources":["../../../../src/lib/feature-collector/feature-collector.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sFAAwE;AAGxE,+DAA2D;AAE3D,MAAa,mBAAmB;IAG9B,YAAoB,gBAA0C;QAC5D,IAAI,CAAC,WAAW,GAAG,gBAAgB,EAAE,cAAc,CAAC;IACtD,CAAC;IAEM,KAAK,CAAC,eAAe;QAC1B,MAAM,MAAM,GAAG,eAAe,CAAC,WAAW,CAAE,IAAI,CAAC,WAAW,CAAE,CAAC;QAE/D,IAAK,CAAC,MAAM,EAAG;YACb,OAAmC,EAAE,CAAC;SACvC;QAED,MAAM,KAAK,GAAG,MAAM,eAAe,CAAC,aAAa,CAAE,IAAI,CAAC,WAAY,CAAE,CAAC;QACvE,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAE,CAAE,IAAI,EAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAE,UAAU,CAAE,CAAE,CAAC;QAE7E,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAChC,YAAY,CAAC,GAAG,CAAE,KAAK,EAAG,OAAO,EAAG,EAAE;YACpC,MAAM,MAAM,GAAG,gCAAc,CAAC,SAAS,CAAE,CAAE,OAAO,CAAE,EAAE,EAAE,CAAE,CAAC;YAE3D,MAAM,eAAe,GAAG,CAAE,MAAM,eAAe,CAAC,aAAa,CAAE,MAAM,CAAE,CAAE,CAAE,CAAC,CAAE,CAAC,eAAe,CAAC;YAC/F,OAAO,eAAe,CAAC;QACzB,CAAC,CAAE,CACJ,CAAC;QAEF,MAAM,gBAAgB,GAAG,QAAQ,CAAC,MAAM,CAAE,CAAE,OAAO,EAAwC,EAAE,CAAC,OAAO,CAAE,OAAO,CAAE,CAAE,CAAC;QAEnH,OAAO,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC;IAC3D,CAAC;CACF;AA9BD,kDA8BC","sourcesContent":["import * as CommonFunctions from '../common-functions/common-functions';\nimport type * as Models from '../models/models';\nimport type * as messages from '@cucumber/messages';\nimport { GherkinStreams } from '@cucumber/gherkin-streams';\n\nexport class CollectFeatureFiles {\n  private readonly featuresDir: string | undefined;\n\n  public constructor( reportGeneration?: Models.ReportGeneration ) {\n    this.featuresDir = reportGeneration?.featuresFolder;\n  }\n\n  public async collectFeatures (): Promise<messages.GherkinDocument[] | null> {\n    const result = CommonFunctions.checkFolder( this.featuresDir );\n\n    if ( !result ) {\n      return <messages.GherkinDocument[]>[];\n    }\n\n    const files = await CommonFunctions.getFilesAsync( this.featuresDir! );\n    const featureFiles = files.filter( ( file ) => file.endsWith( '.feature' ) );\n\n    const features = await Promise.all(\n      featureFiles.map( async ( feature ) => {\n        const stream = GherkinStreams.fromPaths( [ feature ], {} );\n\n        const gherkinDocument = ( await CommonFunctions.streamToArray( stream ) )[ 1 ].gherkinDocument;\n        return gherkinDocument;\n      } ),\n    );\n\n    const filteredFeatures = features.filter( ( feature ): feature is messages.GherkinDocument => Boolean( feature ) );\n\n    return filteredFeatures.length ? filteredFeatures : null;\n  }\n}\n"]}