"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectFeatureFiles = void 0;
const CommonFunctions = __importStar(require("../common-functions/common-functions"));
const gherkin_streams_1 = require("@cucumber/gherkin-streams");
class CollectFeatureFiles {
    constructor(reportGeneration) {
        this.featuresDir = reportGeneration?.featuresFolder;
    }
    async collectFeatures() {
        const result = CommonFunctions.checkFolder(this.featuresDir);
        if (!result) {
            return [];
        }
        const files = await CommonFunctions.getFilesAsync(this.featuresDir);
        const featureFiles = files.filter((file) => file.endsWith('.feature'));
        const features = await Promise.all(featureFiles.map(async (feature) => {
            const stream = gherkin_streams_1.GherkinStreams.fromPaths([feature], {});
            const gherkinDocument = (await CommonFunctions.streamToArray(stream))[1].gherkinDocument;
            return gherkinDocument;
        }));
        const filteredFeatures = features.filter((feature) => Boolean(feature));
        return filteredFeatures.length ? filteredFeatures : null;
    }
}
exports.CollectFeatureFiles = CollectFeatureFiles;
//# sourceMappingURL=feature-collector.js.map