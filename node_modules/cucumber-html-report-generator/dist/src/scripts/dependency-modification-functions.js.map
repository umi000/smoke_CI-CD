{"version":3,"file":"dependency-modification-functions.js","sourceRoot":"","sources":["../../../src/scripts/dependency-modification-functions.ts"],"names":[],"mappings":"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","sourcesContent":["import * as  CommonFunctions from '../lib/common-functions/common-functions';\nimport type * as Models from '../lib/models/models';\nimport * as fse from 'fs-extra';\nimport * as https from 'https';\nimport * as path from 'path';\nimport axios from 'axios';\nimport semver from 'semver';\nimport sri from 'ssri';\n\nexport const downloadFile = async ( url: string, filePath: string ): Promise<boolean> => new Promise<boolean>( ( resolve, reject ) => {\n  https.get( url, response => {\n    const statusCode = response.statusCode;\n\n    if ( statusCode !== 200 ) {\n      reject( new Error( 'Download error!' ) );\n      return;\n    }\n\n    const writeStream = fse.createWriteStream( filePath );\n    response.pipe( writeStream );\n\n    writeStream.on( 'error', () => {\n      reject( new Error( 'Error writing to file!' ) );\n    } );\n    writeStream.on( 'finish', () => {\n      writeStream.close();\n      resolve( true );\n    } );\n  } );\n} ).catch( err => {\n  if ( ( <Error>err ).message.includes( 'Download error!' ) ) {\n    console.log( `error downloading file ${url}` );\n  } else {\n    console.log( ( <Error>err ).message );\n  }\n  return false;\n} );\n\nexport const downloadResource = async ( destinationPath: string, url: string ): Promise<boolean> => {\n  if ( !fse.existsSync( destinationPath ) ) {\n    fse.mkdirSync( path.dirname( destinationPath ), { recursive: true } );\n    const downloadResult = await downloadFile( url, destinationPath );\n    return downloadResult;\n  }\n  return false;\n};\n\nexport const downloadResources = async ( dependency: Models.ResourceProperties ): Promise<void> => {\n  try {\n    await Promise.all( dependency.files.map( async file => {\n      await downloadResource( file.path, file.url ?? '' );\n    } ) );\n  } catch ( error: unknown ) {\n    console.log( `error ${( <Error>error ).message} in function downloadResources with file ${dependency.name} ` );\n  }\n};\n\nexport const getCdnjsResourceInformation = async ( dependency: Models.ResourceProperties, resourcesFolder: string ): Promise<Models.ResourceProperties> => {\n  const resourceUrl = `https://api.cdnjs.com/libraries/${dependency.name}?fields=name,version,repository,assets,latest,name,filename`;\n  let response = <Models.ResourcesCdnjsApiProperties>{};\n  try {\n    response = ( await axios.get<Models.ResourcesCdnjsApiProperties>( resourceUrl ) ).data;\n  } catch ( error: unknown ) {\n    console.log( `error ${( <Error>error ).message} in function getCdnjsResourceInformation with dependency ${dependency.name}` );\n  }\n\n  let filePropertiesArray = <Models.FileProperties[]>[];\n  if ( semver.gt( response.version, dependency.version ) ) {\n    try {\n      filePropertiesArray = dependency.files.map( file => {\n        const destinationPath = path.join( resourcesFolder, `${dependency.name}-${response.version}`, file.name );\n        const url = response.latest.replace( response.filename, file.name );\n        return <Models.FileProperties>{\n          name: file.name,\n          path: destinationPath,\n          url\n        };\n      } );\n    } catch ( error: unknown ) {\n      console.log( `error ${( <Error>error ).message} in function getCdnjsResourceInformation with dependency ${dependency.name}` );\n    }\n  }\n  return <Models.ResourceProperties>{\n    name: dependency.name,\n    files: filePropertiesArray,\n    version: response.version\n  };\n};\n\nexport const getDatatablesResourceInformation = async ( dependency: Models.ResourceProperties, resourcesFolder: string ): Promise<Models.ResourceProperties> => {\n  const resourceUrl = 'https://datatables.net/feeds/versions';\n  let response = <Models.ResourcesCdnDatatablesApiProperties>{};\n  try {\n    response = ( await axios.get<Models.ResourcesCdnDatatablesApiProperties>( resourceUrl ) ).data;\n  } catch ( error: unknown ) {\n    console.log( `error ${( <Error>error ).message} in function getDatatablesResourceInformation with dependency ${dependency.name}` );\n  }\n  let filePropertiesArray = <Models.FileProperties[]>[];\n\n  try {\n    filePropertiesArray = dependency.files.map( file => {\n      const destinationPath = path.join( resourcesFolder, `${dependency.name}-${response[ dependency.name ].release.version}`, file.name );\n      const url = file.url?.replace( dependency.version, response[ dependency.name ].release.version );\n      return <Models.FileProperties>{\n        name: file.name,\n        path: destinationPath,\n        url\n      };\n    } );\n  } catch ( error: unknown ) {\n    console.log( `error ${( <Error>error ).message} in function getDatatablesResourceInformation with dependency ${dependency.name}` );\n  }\n  return <Models.ResourceProperties>{\n    name: dependency.name,\n    files: filePropertiesArray,\n    version: response[ dependency.name ].release.version\n  };\n};\n\nexport const getResourceInformation = async ( dependency: Models.ResourceProperties, resourcesFolder: string ): Promise<Models.ResourceProperties> => {\n  return dependency.cdn === 'cdnjs' ?\n    getCdnjsResourceInformation( dependency, resourcesFolder ) :\n    getDatatablesResourceInformation( dependency, resourcesFolder );\n};\n\nexport const deleteOldDependencies = async ( resourceProperties: Models.ResourceProperties, resourcesFolder: string ): Promise<void> => {\n  await Promise.all( resourceProperties.files.map( async file => {\n    await fse.remove( `${resourcesFolder}/${resourceProperties.name}-${resourceProperties.version}/${file.name}` );\n    console.log( `file: ${resourcesFolder}/${resourceProperties.name}-${resourceProperties.version}/${file.name}, removed` );\n  } ) );\n  await fse.remove( `${resourcesFolder}/${resourceProperties.name}-${resourceProperties.version}` );\n  console.log( `folder: ${resourcesFolder}/${resourceProperties.name}-${resourceProperties.version}, removed` );\n};\n\nexport const updateResourcesTemplates = async ( resourceInformation: Models.ResourceProperties, templateFiles: string[] ): Promise<void> => {\n  await Promise.all( templateFiles.map( async templateFile => {\n    let templateFileContent = await fse.readFile( templateFile, { encoding: 'utf8' } );\n    resourceInformation.files.forEach( resourceFile => {\n      let regex = RegExp( `href.*${resourceFile.name}\" integrity=\"[^\"]+\"`, 'u' );\n      const newFile = resourceInformation.files.filter( file => file.name === resourceFile.name )[ 0 ];\n      const sriValue = sri.fromData( fse.readFileSync( newFile.path ) ).toString();\n      let newUrl = `href=\"${newFile.url!}\" integrity=\"${sriValue}\"`;\n      templateFileContent = templateFileContent.replace( regex, newUrl );\n\n      regex = RegExp( `src.*${resourceFile.name}\" integrity=\"[^\"]+\"`, 'u' );\n      newUrl = `src=\"${newFile.url!}\" integrity=\"${sriValue}\"`;\n      templateFileContent = templateFileContent.replace( regex, newUrl );\n\n      regex = RegExp( `resources.*${resourceFile.name}`, 'u' );\n      newUrl = `resources/${resourceInformation.name}-${resourceInformation.version}/${resourceFile.name}`;\n      templateFileContent = templateFileContent.replace( regex, newUrl );\n    } );\n    await fse.writeFile( templateFile, templateFileContent, { encoding: 'utf8' } ).catch( error => {\n      console.log( ( <Error>error ).message );\n    } );\n  } ) );\n};\n\nconst updateResourcesPropertiesConfigurationJson = async ( configurationData: Models.ResourceProperties[], configurationFile: string ): Promise<void> => {\n  await CommonFunctions.saveJsonFile<Models.ResourceProperties[]>( path.dirname( configurationFile ), path.basename( configurationFile ), configurationData );\n};\n\nexport const updateResources = async ( configurationFile: string, resourcesFolder: string, templates: string[] ): Promise<void> => {\n  const originalConfigurationData = ( await CommonFunctions.readJsonFile<Models.ResourceProperties[]>( configurationFile ) )!;\n  const newConfigurationData = ( await CommonFunctions.readJsonFile<Models.ResourceProperties[]>( configurationFile ) )!;\n  await Promise.all( newConfigurationData.map( async localResourceConf => {\n    const remoteResourceConf = await getResourceInformation( localResourceConf, resourcesFolder );\n    if ( remoteResourceConf.version && remoteResourceConf.files.length && semver.gt( remoteResourceConf.version, localResourceConf.version ) ) {\n      await downloadResources( remoteResourceConf );\n      await updateResourcesTemplates( remoteResourceConf, templates );\n      await deleteOldDependencies( localResourceConf, resourcesFolder );\n      console.log( `Resource ${localResourceConf.name} updated to version ${remoteResourceConf.version}` );\n      localResourceConf.files.map( file => {\n        file.url = file.url?.replace( localResourceConf.version, remoteResourceConf.version );\n        file.path = file.path.replace( localResourceConf.version, remoteResourceConf.version );\n        return file;\n      } );\n      localResourceConf.version = remoteResourceConf.version;\n    }\n    return localResourceConf;\n  } ) );\n\n  if ( JSON.stringify( originalConfigurationData ) === JSON.stringify( newConfigurationData ) ) {\n    console.log( 'All the resources are in the latest version' );\n  }else{    \n    await updateResourcesPropertiesConfigurationJson( newConfigurationData, configurationFile );\n  }\n};\n"]}