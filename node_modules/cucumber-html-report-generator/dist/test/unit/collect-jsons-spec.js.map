{"version":3,"file":"collect-jsons-spec.js","sourceRoot":"","sources":["../../../test/unit/collect-jsons-spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as chai from 'chai';\nimport * as fse from 'fs-extra';\nimport * as path from 'path';\nchai.should();\nimport { CollectJsons } from '../../src/lib/collect-jsons/collect-jsons';\nimport type { ExtendedReport } from '../../src/lib/models/report/extended-report';\nimport type { ReportGeneration } from '../../src/lib/models/common/application-properties';\nimport chaiAsPromised from 'chai-as-promised';\nchai.use( chaiAsPromised );\nconst { expect } = chai;\n\ndescribe( 'CollectJsons.ts', () => {\n  describe( 'Happy flows', () => {\n    it( 'should return an output from the merged found json files', async () => {\n      // Given\n      const outputReportPath = `${process.cwd()}/dist/test/reports/.tmp1/`;\n\n      if ( await fse.pathExists( outputReportPath ) ) {\n        await fse.remove( outputReportPath );\n      }\n\n      await fse.mkdir( outputReportPath, { recursive: true } );\n\n      const pathJsonsToBeJoined = path.resolve( process.cwd(), './test/unit/data/cucumber-report-jsons' );\n      const resultsPath = path.resolve( process.cwd(), './test/unit/data/joined-cucumber-jsons/merged-output.json' );\n      const userProperties: ReportGeneration = {\n        reportPath: outputReportPath,\n        jsonDir: pathJsonsToBeJoined,\n        saveCollectedJSON: true\n      };\n      const collectionJsons = new CollectJsons( userProperties );\n\n      // When\n      const jsonRead = await collectionJsons.createJoinedJson();\n\n      // Then\n      const jsonExpected = <ExtendedReport>await fse.readJson( resultsPath );\n      expect( jsonRead ).to.be.deep.equal( jsonExpected );\n    } );\n  } );\n\n  describe( 'failures', () => {\n    it( 'should return no report from incorrect files', async () => {\n      const pathJsonsToBeJoined = path.resolve( process.cwd(), './test/unit/data/no-jsons' );\n      const userProperties: ReportGeneration = {\n        reportPath: '',\n        jsonDir: pathJsonsToBeJoined\n      };\n\n      // When\n      await new CollectJsons( userProperties ).createJoinedJson().catch( ( error: Error ) => {\n        expect( error.message ).equal( `No JSON files found in '${pathJsonsToBeJoined}'. NO REPORT CAN BE CREATED!` );\n      } );\n    } );\n    it( 'should throw an error when no json files could be found', async () => {\n      const pathJsonsToBeJoined = path.resolve( process.cwd(), './test/unit/data/no-jsons' );\n      const userProperties: ReportGeneration = {\n        reportPath: '',\n        jsonDir: pathJsonsToBeJoined\n      };\n\n      await new CollectJsons( userProperties ).createJoinedJson().catch( ( error: Error ) => {\n        expect( error.message ).equal( `No JSON files found in '${pathJsonsToBeJoined}'. NO REPORT CAN BE CREATED!` );\n      } );\n    } );\n  } );\n} );\n"]}