{"version":3,"file":"base-config.js","sourceRoot":"","sources":["../../../../test/e2e/configuration/base-config.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata';\nimport { CustomCommands } from '../custom-commands/custom-commands';\nimport { registerPagesInContainer } from '../container/container';\n\nconst enableBrowserLogging = async (): Promise<void> => {\n  await browser.cdp( 'Runtime', 'enable' );\n  await browser.cdp( 'Page', 'enable' );\n  await browser.cdp( 'Log', 'enable' );\n  await browser.cdp( 'Console', 'enable' );\n  // browser.on( 'Network.responseReceived', ( params ) => {\n  //   console.log( `Loaded ${( <ResponseReceived>params ).response.status}` );\n  // } );\n  browser.on( 'Runtime.consoleAPICalled', message => {\n    browser.config.params?.consoleLog?.push( <string>message );\n  } );\n  browser.on( 'Runtime.exceptionThrown', message => {\n    browser.config.params?.consoleLog?.push( <string>message );\n  } );\n  browser.on( 'Runtime._exceptionRevoked', message => {\n    browser.config.params?.consoleLog?.push( <string>message );\n  } );\n  browser.on( 'Log.entryAdded', message => {\n    browser.config.params?.consoleLog?.push( <string>message );\n  } );\n  browser.on( 'Console.messageAdded', message => {\n    browser.config.params?.consoleLog?.push( <string>message );\n  } );\n};\n\nconst config: WebdriverIO.Config = {\n  autoCompileOpts: {\n    autoCompile: true,\n    // see https://github.com/TypeStrong/ts-node#cli-and-programmatic-options\n    // for all available options\n    tsNodeOpts: {\n      transpileOnly: true,\n      project: 'tsconfig.json'\n    },\n    // tsConfigPathsOpts:{\n    //   baseUrl: './',\n    //   paths: { '@models': [ 'src/lib/models/models.ts' ], '@common-functions': [ 'src/lib/common-functions/common-functions.ts' ] }\n    // }\n  },\n  //\n  // ==================\n  // Specify Test Files\n  // ==================\n  // Define which test specs should run. The pattern is relative to the directory\n  // From which `wdio` was called. Notice that, if you are calling `wdio` from an\n  // NPM script (see https://docs.npmjs.com/cli/run-script) then the current working\n  // Directory is where your package.json resides, so `wdio` will be called from there.\n  //\n  maxInstances: 1,\n  capabilities: [],\n  //\n  // ===================\n  // Test Configurations\n  // ===================\n  // Define all options that are relevant for the WebdriverIO instance here\n  //\n  // By default WebdriverIO commands are executed in a synchronous way using\n  // The wdio-sync package. If you still want to run your tests in an async way\n  // E.g. using promises you can set the sync option to false.\n  // Sync: true,\n\n  logLevel: 'info',\n  bail: 0,\n  waitforTimeout: 15000,\n  waitforInterval: 1000,\n  connectionRetryTimeout: 90000,\n  connectionRetryCount: 3,\n  framework: 'cucumber',\n  reporters: [\n    'dot',\n    'spec',\n  ],\n\n  //\n  // =====\n  // Hooks\n  // =====\n  // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n  // It and to build services around it. You can either apply a single function or an array of\n  // Methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n  // Resolved to continue.\n\n  before: async (): Promise<void> => {\n    try {\n      await browser.maximizeWindow();\n    } catch ( error: unknown ) {\n      console.log( ( <Error>error ).message );\n    }\n    new CustomCommands().createCutomCommands();\n    registerPagesInContainer();\n\n    await enableBrowserLogging();\n  },\n\n  // afterStep: async ( ): Promise<void> => {\n  //   CucumberJsJsonReporter.attach( await browser.takeScreenshot(), 'image/png' );\n  // },\n\n  services: [\n    'devtools',\n    [\n      'selenium-standalone',\n      {\n        logPath: './.tmp/',\n        installArgs: {\n          version: '4.4.0',\n          drivers: {\n            chrome: {\n              version: 'latest',\n              arch: process.arch,\n              baseURL: 'https://chromedriver.storage.googleapis.com',\n            },\n            firefox: {\n              version: 'latest',\n              arch: process.arch,\n              baseURL: 'https://github.com/mozilla/geckodriver/releases/download',\n            },\n            chromiumedge: {\n              version: 'latest',\n              arch: process.arch,\n              baseURL: 'https://msedgedriver.azureedge.net/',\n            },\n          },\n        },\n        args: {\n          version: '4.4.0',\n          drivers: {\n            chrome: {\n              version: 'latest',\n              arch: process.arch,\n              baseURL: 'https://chromedriver.storage.googleapis.com',\n            },\n            firefox: {\n              version: 'latest',\n              arch: process.arch,\n              baseURL: 'https://github.com/mozilla/geckodriver/releases/download',\n            },\n            chromiumedge: {\n              version: 'latest',\n              arch: process.arch,\n              baseURL: 'https://msedgedriver.azureedge.net/',\n            },\n          },\n        },\n      } ] ],\n};\n\nexport { config };\n"]}