{"version":3,"file":"local-conf.js","sourceRoot":"","sources":["../../../../test/e2e/configuration/local-conf.ts"],"names":[],"mappings":";;;;;;AACA,+CAAuC;AA4F9B,uFA5FA,oBAAM,OA4FA;AA3Ff,6DAA+D;AAC/D,kDAA0B;AAE1B,MAAM,IAAI,GAA0B,eAAK,CAAC,OAAO,CAAE;IACjD,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,KAAK,EAAE;IAChD,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE;IAC1C,YAAY,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,KAAK,EAAE;CACtD,CAAE,CAAC,SAAS,EAAE,CAAC;AAEhB,oBAAM,CAAC,YAAY,GAAG;IACpB;QACE,QAAQ,EAAE,KAAK;KAChB;CACF,CAAC;AAEF,oBAAM,CAAC,YAAY,GAAG;IACtB,uBAAuB;IACrB,OAAO,EAAE,CAAE,0BAA0B,CAAE;IACvC,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,MAAM,EAAE,IAAI;IACZ,OAAO,EAAE,EAAE;IACX,MAAM,EAAE,IAAI;IACZ,WAAW,EAAE,IAAI;IACjB,OAAO,EAAE,MAAM;IACf,0BAA0B,EAAE,KAAK;IACjC,wBAAwB,EAAE,IAAI;IAC9B,KAAK,EAAE,CAAC;CACT,CAAC;AAEF,oBAAM,CAAC,KAAK,GAAG,CAAE,6BAA6B,CAAE,CAAC;AAEjD,IAAK,IAAI,CAAC,KAAK,EAAG;IAChB,oBAAM,CAAC,QAAQ,GAAG,CAAE,WAAW,CAAE,CAAC;CACnC;AAED,IAAK,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAG;IAE/B,oBAAM,CAAC,YAAY,GAAG;QACpB;YACE,WAAW,EAAE,QAAQ;YACrB,0DAA0D;YAC1D,oBAAoB,EAAE;gBACpB,0DAA0D;gBAC1D,0EAA0E;gBAC1E,yCAAyC;gBAEzC,gCAAgC;gBAChC,iBAAiB,EAAE,CAAE,mBAAmB,CAAE;aAC3C;SACF;KACF,CAAC;CACH;AAED,IAAK,IAAI,CAAC,OAAO,KAAK,SAAS,EAAG;IAChC,oBAAM,CAAC,YAAY,GAAG;QACpB;YACE,uFAAuF;YACvF,oFAAoF;YACpF,qCAAqC;YACrC,YAAY,EAAE,CAAC;YACf,WAAW,EAAE,SAAS;YACtB,KAAK,EAAE,CAAE,eAAe,CAAE;YAC1B,oBAAoB,EAAE;YACpB,2KAA2K;YAC3K,sBAAsB;aACvB;YACD,uEAAuE;YACvE,yDAAyD;YACzD,2EAA2E;YAC3E,8CAA8C;SAC/C;KACF,CAAC;CACH;AAED,IAAK,OAAO,IAAI,CAAC,aAAa,KAAK,WAAW,EAAG;IAC/C,oBAAM,CAAC,YAAY,GAAG;QACpB,QAAQ,EAAE,KAAK;QACf,0BAA0B,EAAE,KAAK;QACjC,OAAO,EAAE,CAAE,kCAAkC,CAAE;QAC/C,KAAK,EAAE,CAAC;KACT,CAAC;CACH;AAED,IAAK,OAAO,IAAI,CAAC,YAAY,KAAK,WAAW,EAAG;IAC9C,oBAAM,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;CACzC;AAED,oBAAM,CAAC,MAAM,GAAG,4CAAuB,CAAE","sourcesContent":["import type CommandLineParameters from '../models/command-line-parameters';\nimport { config } from './base-config';\nimport { configurationParameters } from './configuration-data';\nimport yargs from 'yargs';\n\nconst argv: CommandLineParameters = yargs.options( {\n  browser: { type: 'string', demandOption: false },\n  debug: { type: 'boolean', default: false },\n  maxInstances: { type: 'number', demandOption: false }\n} ).parseSync();\n\nconfig.capabilities = [\n  {\n    platform: 'ANY',\n  },\n];\n\nconfig.cucumberOpts = {\n//   snippetSyntax: '',\n  require: [ './test/e2e/steps/**/*.ts' ],\n  backtrace: true,\n  failFast: false,\n  snippets: false,\n  source: true,\n  profile: [],\n  strict: true,\n  tagsInTitle: true,\n  timeout: 500000,\n  ignoreUndefinedDefinitions: false,\n  failAmbiguousDefinitions: true,\n  retry: 0\n};\n\nconfig.specs = [ 'test/e2e/features/*.feature' ];\n\nif ( argv.debug ) {\n  config.execArgv = [ '--inspect' ];\n}\n\nif ( argv.browser === 'chrome' ) {\n\n  config.capabilities = [\n    {\n      browserName: 'chrome',\n      // 'goog:loggingPrefs': { browser: 'ALL', driver: 'ALL' },\n      'goog:chromeOptions': {        \n        // To run chrome headless the following flags are required\n        // (see https://developers.google.com/web/updates/2017/04/headless-chrome)\n        // Args: ['--headless', '--disable-gpu'],\n\n        // args: [ 'disable-infobars' ],\n        'excludeSwitches': [ 'enable-automation' ]\n      },\n    },\n  ];\n}\n\nif ( argv.browser === 'firefox' ) {\n  config.capabilities = [\n    {\n      // MaxInstances can get overwritten per capability. So if you have an in house Selenium\n      // Grid with only 5 firefox instance available you can make sure that n ot more than\n      // 5 instance gets started at a time.\n      maxInstances: 5,\n      browserName: 'firefox',\n      specs: [ 'test/ffOnly/*' ],\n      'moz:firefoxOptions': {\n        // Flag to activate Firefox headless mode (see https://github.com/mozilla/geckodriver/blob/master/README.md#firefox-capabilities for more details about moz:firefoxOptions)\n        // Args: ['-headless']\n      },\n      // If outputDir is provided WebdriverIO can capture driver session logs\n      // It is possible to configure which logTypes to exclude.\n      // ExcludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs\n      // ExcludeDriverLogs: ['bugreport', 'server'],\n    },\n  ];\n}\n\nif ( typeof argv.generateSteps !== 'undefined' ) {\n  config.cucumberOpts = {\n    snippets: false,\n    ignoreUndefinedDefinitions: false,\n    require: [ './test/e2e/step-definitions/*.ts' ], // <string[]> (file/dir) require files before executing features\n    retry: 0\n  };\n}\n\nif ( typeof argv.maxInstances !== 'undefined' ) {\n  config.maxInstances = argv.maxInstances;\n}\n\nconfig.params = configurationParameters ;\n\nexport { config };\n"]}