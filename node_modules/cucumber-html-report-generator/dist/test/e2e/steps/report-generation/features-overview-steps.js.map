{"version":3,"file":"features-overview-steps.js","sourceRoot":"","sources":["../../../../../test/e2e/steps/report-generation/features-overview-steps.ts"],"names":[],"mappings":"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","sourcesContent":["import * as CommonFunctions from '../../../../src/lib/common-functions/common-functions';\nimport { Given, Then, When } from '@cucumber/cucumber';\nimport { CommonPage } from '../../pages/common/common-page';\nimport { FeaturesOverviewPage } from '../../pages/report-generation/features-overview-page';\nimport { ReportGenerationApiPage } from '../../pages/report-generation/report-generation-api-page'; \nimport chai from 'chai';\nimport { container } from 'tsyringe';\nimport path from 'path';\nchai.should();\nconst reportGenerationApiPage: ReportGenerationApiPage = container.resolve( ReportGenerationApiPage );\nconst commonPage = container.resolve( CommonPage );\nconst featuresOverviewPage = container.resolve( FeaturesOverviewPage );\n\nGiven( /^The folder '(.*)' is deleted$/, async ( reportFolder: string ) =>{\n  await CommonFunctions.emptyFolder( reportFolder );\n} );\n\nGiven( /^The user generates a report with '(.*)' theme in the folder '(.*)'$/, async ( theme: string, folder: string ) =>{\n  const reportPath = path.join( path.resolve( './' ), folder );\n  await reportGenerationApiPage.generateReport( theme, reportPath );\n} );\n\nWhen( /^The user opens the report in the '(.*)' folder$/, async ( folder: string ) =>{\n  const reportPath = path.join( 'file://', path.resolve( './' ), folder, 'index.html' );\n  await commonPage.navigateToUrl( reportPath );\n} );\n\nThen( /^The browser have the errors '(.*)' in the console$/, ( consoleErrors: string ) =>{\n  const errors = commonPage.getConsoleErrors();\n  const expectedConsoleErrors = consoleErrors === '' ? [] : consoleErrors.split( ';' );\n  errors?.should.be.deep.equal( expectedConsoleErrors );\n} );\n\nThen( /^The '(.*)' graph is '(displayed|not displayed)' in the features-overview page$/, async ( graphName: string, status: string ) =>{\n  const isgraphDisplayed = await featuresOverviewPage.isGraphDisplayed( graphName );\n  isgraphDisplayed.should.be.equal( status === 'displayed' );\n} );\n\nThen( /^The additional data header title is '(.*)' in the features-overview page$/, async ( expectedAdditionalDataTitle: string ) =>{\n  const expectedTitleText = await featuresOverviewPage.getAdditionalDataTitleText();\n  expectedTitleText?.should.be.equal( expectedAdditionalDataTitle );\n} );\n\nThen( /^The '(.*)' field value is '(.*)' in the features-overview page$/, async ( propetyName: string, expectedPropertyValue: string ) =>{\n  const propertyValue = await featuresOverviewPage.getAdditionalDataPropertyValue( propetyName );\n  propertyValue?.should.be.equal( expectedPropertyValue );\n} );\n\n\nWhen( /^The user opens the feature '(.*)'$/, async ( featureName: string ) =>{\n  await featuresOverviewPage.clickOnFeatureLink( featureName );\n} );\n"]}