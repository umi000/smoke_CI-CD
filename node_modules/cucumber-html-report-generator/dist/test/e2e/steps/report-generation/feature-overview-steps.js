"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cucumber_1 = require("@cucumber/cucumber");
const feature_overview_page_1 = require("../../pages/report-generation/feature-overview-page");
const chai_1 = __importDefault(require("chai"));
chai_1.default.should();
const tsyringe_1 = require("tsyringe");
const featureOverviewPage = tsyringe_1.container.resolve(feature_overview_page_1.FeatureOverviewPage);
(0, cucumber_1.Then)(/^The '(.*)' graph is '(displayed|not displayed)' in the feature-overview page$/, async (graphName, status) => {
    const graphStatus = await featureOverviewPage.isGraphDisplayed(graphName);
    graphStatus.should.be.equal(status === 'displayed');
});
(0, cucumber_1.Then)(/^The additional data header title is '(.*)' in the feature-overview page$/, async (expectedTitle) => {
    const applicationAdditionalDataTitle = await featureOverviewPage.getAdditionalDataTitleText();
    applicationAdditionalDataTitle?.should.be.equal(expectedTitle);
});
(0, cucumber_1.Then)(/^The '(.*)' field value is '(.*)' in the feature-overview page$/, async (fieldName, expectedFieldValue) => {
    const appFieldValue = await featureOverviewPage.getAdditionalDataPropertyValue(fieldName);
    appFieldValue?.should.be.equal(expectedFieldValue);
});
(0, cucumber_1.When)(/^The user clicks on the scenario title: '(.*)'$/, async (scenarioTitle) => {
    await featureOverviewPage.clickOnScenarioTitle(scenarioTitle);
});
(0, cucumber_1.When)(/^The user clicks on the cell '(.*)' of the row '(.*)' at the scenario outline '(.*)' in the feature-overview page$/, async (columnNumber, rowNumber, scenarioName) => {
    await featureOverviewPage.clickOnScenarioOutlineTableCell(rowNumber, columnNumber, scenarioName);
});
(0, cucumber_1.When)(/^The user clicks on the scenario title '(.*)' at the row '(.*)' in the scenarios table in the feature-overview page$/, async (scenarioTitle, rowNumber) => {
    await featureOverviewPage.clickOnScenarioTitleInScenariosOutlineTableRow(scenarioTitle, rowNumber);
});
(0, cucumber_1.Then)(/^The step '(.*)' in the row '(.*)' of the scenario outline '(.*)' has the text '(.*)' in the feature-overview page$/, async (stepNumber, rowNumber, scenarioNane, expectedText) => {
    const stepText = await featureOverviewPage.getStepTextInScenarioOutline(scenarioNane, rowNumber, stepNumber);
    stepText?.should.be.equal(expectedText);
});
//# sourceMappingURL=feature-overview-steps.js.map